% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/xgb.R
\name{xgb}
\alias{xgb}
\title{Extreme gradient boosting for domain-level averages}
\usage{
xgb(
  fixed,
  smp_data,
  smp_weights = NULL,
  pop_data,
  pop_weights = NULL,
  domains,
  sub_domains,
  transformation = "no",
  B = 100,
  conf_level = 0.95,
  nround = 100,
  max_depth = 4,
  colsample_bytree = 0.6,
  colsample_bylevel = 0.6,
  colsample_bynode = 0.6,
  subsample = 0.6,
  min_child_weight = 1,
  eta = 0.3,
  gamma = 0,
  max_delta_step = 0,
  lambda = 1,
  alpha = 0,
  ...
)
}
\arguments{
\item{fixed}{a two-sided linear formula object describing the
fixed-effects part of the model with the dependent variable on the left
of a ~ operator and the explanatory variables on the right, separated
by + operators. All variables (except for \code{domains} and \code{subdomains})
must be numeric.}

\item{smp_data}{a data frame that needs to comprise all variables including
\code{domains} and \code{sub_domains}.}

\item{smp_weights}{a character string containing the name of the variable that
indicates weights in the \code{smp_data}. The variable has to be numeric.
Defaults to \code{NULL}.}

\item{pop_data}{a data frame that needs to comprise all variables including
\code{domains} and \code{sub_domains}.}

\item{pop_weights}{a character string containing the name of the variable that
indicates population weights in \code{pop_data}. The variable has to be
 numeric. Defaults to \code{NULL}.}

\item{domains}{a character string containing the name of a variable
that indicates domains in \code{smp_data} and \code{pop_data}. The variable can be
numeric or a factor.}

\item{sub_domains}{character string specifying the variable name that denotes
sub-domains within the dataset. This variable must have unique values across
observations.}

\item{transformation}{a character string. Two different transformation
types for the dependent variable can be chosen (i) no transformation ("no");
(ii) log transformation ("log"); (iii) Arcsin transformation ("arcsin").
Defaults to \code{"no"}.}

\item{B}{a number determining the number of bootstrap populations in the
nonparametric residual bootstrap approach used in the MSE estimation. The
number must be greater than 1. Defaults to 100. For practical applications,
values larger than 200 are recommended.}

\item{conf_level}{confidence level for the confidence interval. Defaults to 0.95.}

\item{nround}{maximum number of boosting iterations. Defaults to 100.}

\item{max_depth}{maximum depth of a tree. Increasing this value will result
in a more complex model, increasing the likelihood of overfitting. A value of
 0 indicates no limit on the depth. Defaults to 4.}

\item{colsample_bytree}{subsample ratio of columns when constructing
each tree. Subsampling occurs once for every tree constructed. Range of (0, 1].
Defaults to 0.6.}

\item{colsample_bylevel}{subsample ratio of columns for each level.
Subsampling occurs once for every new depth level reached in a tree. Columns
are subsampled from the set of columns chosen for the current tree. Range of (0, 1].
Defaults to 0.6.}

\item{colsample_bynode}{subsample ratio of columns for each node (split).
Subsampling occurs once every time a new split is evaluated. Columns are
subsampled from the set of columns chosen for the current level. Range of (0, 1].
Defaults to 0.6.}

\item{subsample}{subsample ratio of the training instances. Subsampling will occur once in every boosting iteration.
Range of (0, 1]. Defaults to 0.6.}

\item{min_child_weight}{minimum sum of instance weight required in a child node.
If the tree partitioning step produces a leaf node with a sum of instance weight
 less than \code{min_child_weight}, then the building process will cease further
  partitioning. A larger value of \code{min_child_weight} leads to a more
  conservative algorithm. Defaults to 1.}

\item{eta}{step size shrinkage. After each boosting step, one can obtain the
weights of new features directly, and the parameter \code{eta} is used to shrink
these feature weights, thereby making the boosting process more conservative.
Range of [0, 1]. Defaults to 0.3.}

\item{gamma}{minimum loss reduction needed to create an additional partition on
a leaf node of the tree. A larger value of \code{gamma} corresponds to a more
conservative algorithm. Defaults to 0.}

\item{max_delta_step}{maximum allowed step size for adjusting the output of each
leaf. If the value is set to 0, it indicates that there is no constraint. Defaults to 0.}

\item{lambda}{L2 regularization term on weights. Increasing this value will result in a more conservative model.
Defaults to 1.}

\item{alpha}{L1 regularization term on weights. Increasing this value will result in a more conservative model.
Defaults to 0.}

\item{...}{additional parameters to be passed to \code{xgboost}.}
}
\value{
An object of class \code{xgb}, \code{emdi}, which encompasses point estimates,
uncertainty, and confidence intervals at the domain level, along with details regarding
the \code{xgb} model. Various generic functions such as \code{summary}, \code{estimators}
and \code{map_plot} are applicable to a model of the class \code{xgb}.
}
\description{
The function \code{xgb} employs the extreme gradient boosting methodology introduced
by \cite{Merfeld and Newhouse (2023)} to estimate domain-level averages, particularly
for small area estimation (SAE) applications. Moreover, to estimate the mean squared
error (MSE), a nonparametric residual bootstrap approach is utilized, as described
in \cite{Krennmair and Schmid (2022)} and \cite{Merfeld and Newhouse (2023)}.
}
\examples{
\donttest{
# Loading data - population and sample data
data("eusilcA_pop")
data("eusilcA_smp")

# Create subdomains: Equal to individuals in each area
eusilcA_smp$subDomain <- ave(eusilcA_smp$district,
                             eusilcA_smp$district,
                             FUN = seq_along)
eusilcA_pop$subDomain <- ave(eusilcA_pop$district,
                             eusilcA_pop$district,
                             FUN = seq_along)

# Estimate extreme gradient boosting model
xgb_model <- xgb(fixed = eqIncome ~ eqsize + cash + self_empl +
                 unempl_ben + age_ben + surv_ben + sick_ben+
                 dis_ben +rent + fam_allow + house_allow +
                 cap_inv + tax_adj + district + subDomain,
                 smp_data = eusilcA_smp,
                 pop_data = eusilcA_pop,
                 domains = "district",
                 sub_domains = "subDomain")

# Extract Mean, MSE and CV
estimators(object = xgb_model, indicator = "Mean",
           MSE = TRUE, CV =TRUE)

# Plot the results on a map
load_shapeaustria()
map_plot(object = xgb_model, MSE = FALSE, CV = TRUE,
         map_obj = shape_austria_dis, indicator = c("Mean"),
         map_dom_id = "PB")
}
}
\references{
Krennmair, P., & Schmid, T. (2022). Flexible Domain Prediction Using Mixed Effects
Random Forests. Journal of Royal Statistical Society: Series C (Applied Statistics),
Vol.71, No. 5, 1865â€“1894.\cr \cr
Merfeld, J. D., & Newhouse, D. (2023). Improving Estimates of Mean Welfare and Uncertainty
in Developing Countries (No. 10348). The World Bank.
}
